import {Config} from "../config";
import {writeFile} from "fs/promises";
import {fileIcons} from "../vscode-icons/src/defaults/fileIcons";

const template = `// This file is automatically generated by Assets Builder.
// DO NOT MODIFY IT MANUALLY!

package cat.wavy.catactivity.types

import cat.wavy.catactivity.CatActivity

enum class FileType(
    val typeName: String,
    val icon: String
) {
    %fileTypes%
}

fun getFileTypeByName(fileType: String, fileName: String, extension: String?) = when (fileName.lowercase()) {
    %fileNameMatch%
    else -> when (fileType) {
        %fileTypeMatch%
        else -> when (extension?.lowercase()) {
            %fileExtensionMatch%
            else -> FileType.FILE.also {
                CatActivity.logger.warn("Unknown file type: $fileType ($extension)")
            }
        }
    }
}`

export type Files = {
    enumName: string
    name: string
    icon: string
    fileNames: string[] | null | undefined
    fileTypes: string[] | null | undefined
    fileExtensions: string[] | null | undefined
}

function formatFileTypes(files: Files[]): string {
    const items: string[] = []

    for (let file of files) {
        items.push(`${file.enumName}("${file.name}", "${file.icon}")`)
    }

    return items.join(",\n    ")
}

function formatFileNameMatch(files: Files[]): string {
    const items: string[] = []

    for (let file of files) {
        if (!(file.fileNames)) continue
        items.push(`"${file.fileNames.join('", "')}" -> FileType.${file.enumName}`)
    }

    return items.join("\n    ") // 4 spaces
}

function formatFileTypeMatch(files: Files[]): string {
    const items: string[] = []

    for (let file of files) {
        if (!(file.fileTypes)) continue
        items.push(`"${file.fileTypes.join('", "')}" -> FileType.${file.enumName}`)
    }

    return items.join("\n        ") // 8 spaces
}

function formatFileExtensionMatch(files: Files[]): string {
    const items: string[] = []

    for (let file of files) {
        if (!(file.fileExtensions)) continue
        items.push(`"${file.fileExtensions.join('", "')}" -> FileType.${file.enumName}`)
    }

    return items.join("\n            ") // 12 spaces
}

export async function code_generation(config: Config) {
    const items: Files[] = []

    for (let icon in config.fileIcons) {
        const property = config.fileIcons[icon]
        const enumName = property.enumName ? property.enumName : icon.toUpperCase().replace(/-/g, "_")
        items.push({
            icon: icon,
            name: property.title,
            enumName: enumName,
            fileTypes: property.fileTypes,
            fileExtensions: property.extensions === undefined ? fileIcons[icon].fileExtensions : property.extensions,
            fileNames: property.fileNames === undefined ? fileIcons[icon].fileNames : property.fileNames
        })
    }

    const fileTypes = formatFileTypes(items)
    const fileNameMatch = formatFileNameMatch(items)
    const fileTypeMatch = formatFileTypeMatch(items)
    const fileExtensionMatch = formatFileExtensionMatch(items)

    const code = template
        .replace('%fileTypes%', fileTypes)
        .replace('%fileNameMatch%', fileNameMatch)
        .replace('%fileTypeMatch%', fileTypeMatch)
        .replace('%fileExtensionMatch%', fileExtensionMatch)
    const outputPath = 'src/main/kotlin/cat/wavy/catactivity/types/FileType.kt'

    await writeFile(outputPath, code)
}
